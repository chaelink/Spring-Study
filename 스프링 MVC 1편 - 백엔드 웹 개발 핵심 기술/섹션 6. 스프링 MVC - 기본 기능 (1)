# 섹션 6. 스프링 MVC - 기본 기능 (1)

## 1. 프로젝트 생성

**프로젝트 생성**

- JAR 선택
- Spring Web, Thymleaf, Lombok 추가

<br>

**프로젝트 동작 확인**
![image](https://github.com/2024-SpringStudy/spring/assets/92051742/7e21ae40-6a74-4aa7-8e44-6336017d51b0)

## 2. 로깅 간단히 알아보기

**로깅 라이브러리**
스프링 부트 라이브러리에 스프링 부트 로깅 라이브러리가 함께 포함된다
- SLF4J
- LogBack

**매핑 정보**

- `@RestController`
    - 반환 값으로 뷰를 찾는 대신 HTTP 메시지 바디에 바로 입력한다. 따라서 문자열 ok 등을 실행결과로 전달 가능

**테스트** 

- 로그가 출력되는 포맷 확인
- 로그 레벨의 설정 변경 가능
    - 로그 레벨 : ` TRACE > DEBUG > INFO > WARN > ERROR`
    - 개발 서버 : debug 출력
    - 운영 서버 : info 출력
    - `@Slf4j`로 변경

**올바른 로그 사용법**

- `log.debug("data="+data)` : 로그 출력 레벨을 info로 설정해도 문자 더하기 연산 발생
-  `log.debug("data={}", data)` : 로그 출력 레벨을 info로 설정해도 아무일도 발생하지 않는다


**로그 사용시 장점**

- 쓰레드 정보, 클래스 이름 같은 부가 정보 함께 확인 가능, 출력 모양 조절 가능
- 로그 레벨에 따라 상황에 맞게 로그 출력 조정 가능
- 파일이나 네트워크 등 로그를 별도의 위치에 남길 수 있다
- System.out 보다 성능이 좋다

## 3. 요청 매핑

**매핑 정보**
- `@RequestMapping("/hello-basic")`
    -  `/hello-basic`으로 url이 오면 이 메서드가 실행됨
    - 배열로 다중 설정 가능, `{"/hello-basic", "/hello-go"}`
    - 맨 마지막의 / 유무를 같은 요청으로 매핑 ,  `/hello-basic , /hello-basic/`


**HTTP 메서드 매핑**

- method 속성으로 HTTP 를 지정하지 않으면 HTTP와 무관하게 호출됨
- 모든 메서드 지정 가능
- `@GetMapping `과 같이 지정 가능

<br>

**PathVariable 사용**
```java
/**
 * PathVariable 사용
 * 변수명이 같으면 생략 가능
 * @PathVariable("userId") String userId -> @PathVariable String userId
 */
@GetMapping("/mapping/{userId}")
public String mappingPath(@PathVariable("userId") String data) {
    log.info("mappingPath userId={}", data);
    return "ok";
}
```

- `@RequestMapping` 은 URL 경로를 템플릿화 할 수 있는데, `@PathVariable` 을 사용하면 매칭 되는 부분을
편리하게 조회할 수 있다.

- `@PathVariable `의 이름과 파라미터 이름이 같으면 생략 가능

<br>

**다중 사용 경우**
```java
/**
 * PathVariable 사용 다중
 */
@GetMapping("/mapping/users/{userId}/orders/{orderId}")
public String mappingPath(@PathVariable String userId, @PathVariable Long
orderId) {
 log.info("mappingPath userId={}, orderId={}", userId, orderId);
 return "ok";
}
```

<br>

**특정 파라미터 조건 매핑**
특정 파라미터가 있거나 없는 조건을 추가, 자주 사용하지는 않음
```java
/**
 * 파라미터로 추가 매핑
 * params="mode",
 * params="!mode"
 * params="mode=debug"
 * params="mode!=debug" (! = )
 * params = {"mode=debug","data=good"}
 */
@GetMapping(value = "/mapping-param", params = "mode=debug")
public String mappingParam() {
    log.info("mappingParam");
    return "ok";
}
```

<br>

**특정 헤더 조건 매핑**
파라미터 매핑과 유사하지만 HTTP 헤더 사용, Postman으로 테스트해야함

```java
/**
 * 특정 헤더로 추가 매핑
 * headers="mode",
 * headers="!mode"
 * headers="mode=debug"
 * headers="mode!=debug" (! = )
 */
@GetMapping(value = "/mapping-header", headers = "mode=debug")
public String mappingHeader() {
    log.info("mappingHeader");
    return "ok";
}
```



## 4. 요청 매핑 - API 예시
회원 관리를 HTTP API로 만든다 생각하고 매핑 알아보기

![image](https://github.com/2024-SpringStudy/spring/assets/92051742/0301f4f7-fb49-409a-b24a-189190b8c19d)

```java
@RestController
@RequestMapping("/mapping/users")
public class MappingClassController {
    /**
     * GET /mapping/users
     */
    @GetMapping
    public String users() {
        return "get users";
    }
    /**
     * POST /mapping/users
     */
    @PostMapping
    public String addUser() {
        return "post user";
    }
    /**
     * GET /mapping/users/{userId}
     */
    @GetMapping("/{userId}")
    public String findUser(@PathVariable String userId) {
        return "get userId=" + userId;
    }
    /**
     * PATCH /mapping/users/{userId}
     */
    @PatchMapping("/{userId}")
    public String updateUser(@PathVariable String userId) {
        return "update userId=" + userId;
    }
    /**
     * DELETE /mapping/users/{userId}
     */
    @DeleteMapping("/{userId}")
    public String deleteUser(@PathVariable String userId) {
        return "delete userId=" + userId;
    }
}
```

- `@RequestMapping("/mapping/users")` : 클래스 레벨에 매핑 정보를 두면 메서드 레벨에서 해당 정보를 조합, 사용
![image](https://github.com/2024-SpringStudy/spring/assets/92051742/640b0ecf-36e0-4ece-8f77-50a00a210efb)


